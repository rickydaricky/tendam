{"ast":null,"code":"var _jsxFileName = \"/Users/heonlee/Desktop/Brown/cs0320/term-project-eyan13-hlee184-mji13-rrajesh-wzhong3/blackjack/src/BlackJack.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { AwesomeButton } from \"react-awesome-button\"; //import AwesomeButtonStyles from \"react-awesome-button/src/styles/styles.scss\";\n\nimport \"react-awesome-button/dist/styles.css\";\nimport TextBox from \"./TextBox\";\nimport GameMessage from \"./GameMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BlackJack(props) {\n  _s();\n\n  const cards = Array.from(Array(52).keys());\n  const [playerScore, setPlayerScore] = useState(0);\n  const [dealerScore, setDealerScore] = useState(0);\n  const [whoWon, setWhoWon] = useState(\"\");\n  const [cardsToDealer, setCardsToDealer] = useState([]);\n  const [cardsToPlayer, setCardsToPlayer] = useState([]);\n  const [cardValuesToDealer, setCardValuesToDealer] = useState([]);\n  const [cardValuesToPlayer, setCardValuesToPlayer] = useState([]);\n\n  function play() {\n    let dealerCardsAndValues = setUpCards(2);\n    let playerCardsAndValues = setUpCards(2);\n    setCardsToDealer(cardsToDealer.concat(dealerCardsAndValues[0]));\n    setCardsToPlayer(cardsToPlayer.concat(playerCardsAndValues[0]));\n    setCardValuesToDealer(cardValuesToDealer.concat(dealerCardsAndValues[1]));\n    setCardValuesToPlayer(cardValuesToPlayer.concat(playerCardsAndValues[1]));\n    console.log(cardValuesToDealer);\n    console.log(cardValuesToPlayer);\n  }\n\n  function setUpCards(n) {\n    let cardsToAdd = [];\n    let cardsToPerson = [];\n    let cardsValuesToPerson = [];\n\n    for (let i = 0; i < n; i++) {\n      let randIndex = Math.floor(Math.random() * cards.length);\n      let chosenCardKey = cards.splice(randIndex, 1);\n      let chosenCard = cardFromKey(chosenCardKey);\n      cardsValuesToPerson.push(chosenCardKey % 13 + 1);\n      cardsToPerson.push(chosenCard);\n    }\n\n    cardsToAdd.push(cardsToPerson);\n    cardsToAdd.push(cardsValuesToPerson);\n    return cardsToAdd;\n  } // TODO: Currently coded for the purpose of displaying as text message, but should change it\n  // to make it easier to find the right graphics to display\n\n\n  function cardFromKey(key) {\n    let card = \"\";\n    let cardNumber = key % 13 + 1;\n\n    if (cardNumber === 1) {\n      card += \"Ace \";\n    } else if (cardNumber === 11) {\n      card += \"Jack \";\n    } else if (cardNumber === 12) {\n      card += \"Queen \";\n    } else if (cardNumber === 13) {\n      card += \"King \";\n    } else {\n      card += cardNumber + \" \";\n    } // Spades\n\n\n    if (key < 13) {\n      card += \"Spades \";\n    } // Hearts\n    else if (key < 26) {\n        card += \"Hearts \";\n      } // Clubs\n      else if (key < 39) {\n          card += \"Clubs \";\n        } // Diamonds\n        else {\n            card += \"Diamonds \";\n          }\n\n    return card;\n  }\n\n  function checkGameResults() {\n    const player = calculateScore(cardValuesToDealer);\n    const dealer = calculateScore(cardValuesToPlayer); // TODO: Fix the logic here\n\n    if (player > 21) {\n      setWhoWon(\"You Lose :(\");\n    } else if (player > dealer || dealer > 21) {\n      //display \"you win!\"\n      setWhoWon(\"You Win!\");\n    } // else if (player < dealer) {\n    else {\n        //display \"you lose :(\"\n        setWhoWon(\"You Lose :(\");\n      } // else {\n    //     //display \"it's a tie\"\n    //     // I think dealer wins if its a tie\n    //     setWhoWon(\"It's a Tie!\");\n    // }\n\n  }\n\n  function calculateScore(person) {\n    let score = 0;\n\n    for (let i = 0; i < person.length; i++) {\n      score += person[i];\n    }\n\n    return score;\n  }\n\n  function hit() {\n    console.log(cardValuesToDealer);\n\n    if (calculateScore(cardValuesToDealer) < 17) {\n      setCardsToDealer(cardsToDealer.concat(setUpCards(1, cardValuesToDealer, setCardValuesToDealer)));\n    }\n\n    setCardsToPlayer(cardsToPlayer.concat(setUpCards(1, cardValuesToPlayer, setCardValuesToPlayer)));\n    checkGameResults();\n  }\n\n  function stand() {\n    while (calculateScore(cardValuesToDealer) < 17) {\n      setCardsToDealer(cardsToDealer.concat(setUpCards(1, cardValuesToDealer, setCardValuesToDealer)));\n    }\n\n    checkGameResults();\n  }\n  /**\n   * Gets key longitude\n   * @param lon\n   * @param lambda\n   * @returns {JSX.Element}\n   */\n  //function convertKeytoCard(num) {\n  //     return Math.floor(lon / lambda) * lambda;\n  //}\n  // function Button() {\n  //     return <AwesomeButton type=\"primary\"> Button</AwesomeButton>;\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GameMessage, {\n      text: \"Dealer's cards: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameMessage, {\n      text: cardsToDealer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameMessage, {\n      text: \"Player's cards: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameMessage, {\n      text: cardsToPlayer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AwesomeButton, {\n      type: \"primary\",\n      size: \"large\",\n      onPress: play,\n      children: \"Play!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AwesomeButton, {\n      type: \"primary\",\n      size: \"large\",\n      onPress: hit,\n      children: \"Hit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AwesomeButton, {\n      type: \"primary\",\n      size: \"large\",\n      onPress: stand,\n      children: \"Stand\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameMessage, {\n      text: whoWon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BlackJack, \"KDocVNBX2XqZp3OOhA94fvtblW0=\");\n\n_c = BlackJack;\nexport default BlackJack;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlackJack\");","map":{"version":3,"sources":["/Users/heonlee/Desktop/Brown/cs0320/term-project-eyan13-hlee184-mji13-rrajesh-wzhong3/blackjack/src/BlackJack.js"],"names":["React","useState","useEffect","useRef","AwesomeButton","TextBox","GameMessage","BlackJack","props","cards","Array","from","keys","playerScore","setPlayerScore","dealerScore","setDealerScore","whoWon","setWhoWon","cardsToDealer","setCardsToDealer","cardsToPlayer","setCardsToPlayer","cardValuesToDealer","setCardValuesToDealer","cardValuesToPlayer","setCardValuesToPlayer","play","dealerCardsAndValues","setUpCards","playerCardsAndValues","concat","console","log","n","cardsToAdd","cardsToPerson","cardsValuesToPerson","i","randIndex","Math","floor","random","length","chosenCardKey","splice","chosenCard","cardFromKey","push","key","card","cardNumber","checkGameResults","player","calculateScore","dealer","person","score","hit","stand"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { AwesomeButton } from \"react-awesome-button\";\n//import AwesomeButtonStyles from \"react-awesome-button/src/styles/styles.scss\";\nimport \"react-awesome-button/dist/styles.css\";\nimport TextBox from \"./TextBox\";\nimport GameMessage from \"./GameMessage\";\n\nfunction BlackJack(props) {\n    const cards = Array.from(Array(52).keys());\n    const [playerScore, setPlayerScore] = useState(0);\n    const [dealerScore, setDealerScore] = useState(0);\n    const [whoWon, setWhoWon] = useState(\"\");\n\n    const [cardsToDealer, setCardsToDealer] = useState([]);\n    const [cardsToPlayer, setCardsToPlayer] = useState([]);\n    const [cardValuesToDealer, setCardValuesToDealer] = useState([]);\n    const [cardValuesToPlayer, setCardValuesToPlayer] = useState([]);\n\n    function play() {\n        let dealerCardsAndValues = setUpCards(2);\n        let playerCardsAndValues = setUpCards(2);\n        setCardsToDealer(cardsToDealer.concat(dealerCardsAndValues[0]));\n        setCardsToPlayer(cardsToPlayer.concat(playerCardsAndValues[0]));\n        setCardValuesToDealer(cardValuesToDealer.concat(dealerCardsAndValues[1]));\n        setCardValuesToPlayer(cardValuesToPlayer.concat(playerCardsAndValues[1]));\n        console.log(cardValuesToDealer);\n        console.log(cardValuesToPlayer);\n    }\n\n    function setUpCards(n) {\n        let cardsToAdd = [];\n        let cardsToPerson = [];\n        let cardsValuesToPerson = [];\n\n        for (let i = 0; i < n; i++) {\n            let randIndex = Math.floor(Math.random() * cards.length);\n            let chosenCardKey = cards.splice(randIndex, 1);\n            let chosenCard = cardFromKey(chosenCardKey);\n\n            cardsValuesToPerson.push(chosenCardKey % 13 + 1);\n            cardsToPerson.push(chosenCard);\n        }\n\n        cardsToAdd.push(cardsToPerson);\n        cardsToAdd.push(cardsValuesToPerson);\n\n        return cardsToAdd;\n    }\n\n    // TODO: Currently coded for the purpose of displaying as text message, but should change it\n    // to make it easier to find the right graphics to display\n    function cardFromKey(key) {\n        let card = \"\";\n\n        let cardNumber = key % 13 + 1;\n        if (cardNumber === 1) {\n            card += \"Ace \";\n        } else if (cardNumber === 11) {\n            card += \"Jack \";\n        } else if (cardNumber === 12) {\n            card += \"Queen \";\n        } else if (cardNumber === 13) {\n            card += \"King \";\n        } else {\n            card += cardNumber + \" \";\n        }\n\n        // Spades\n        if (key < 13) {\n            card += \"Spades \";\n        } \n        // Hearts\n        else if (key < 26) {\n            card += \"Hearts \";\n        } \n        // Clubs\n        else if (key < 39) {\n            card += \"Clubs \";\n        }\n        // Diamonds\n        else {\n            card += \"Diamonds \";\n        }\n\n        return card;\n    }\n\n    function checkGameResults() {\n        const player = calculateScore(cardValuesToDealer);\n        const dealer = calculateScore(cardValuesToPlayer);\n        // TODO: Fix the logic here\n        if (player > 21) {\n            setWhoWon(\"You Lose :(\");\n        }\n        else if (player > dealer || dealer > 21) {\n            //display \"you win!\"\n            setWhoWon(\"You Win!\");\n        }\n        // else if (player < dealer) {\n        else {\n            //display \"you lose :(\"\n            setWhoWon(\"You Lose :(\");\n        }\n        // else {\n        //     //display \"it's a tie\"\n        //     // I think dealer wins if its a tie\n        //     setWhoWon(\"It's a Tie!\");\n        // }\n    }\n\n    function calculateScore(person) {\n        let score = 0;\n        for (let i = 0; i < person.length; i++) {\n            score += person[i];\n        }\n        return score;\n    }\n\n\n    function hit() {\n        console.log(cardValuesToDealer);\n        if (calculateScore(cardValuesToDealer) < 17) {\n            setCardsToDealer(cardsToDealer.concat(setUpCards(1, cardValuesToDealer, setCardValuesToDealer)));\n        }\n\n        setCardsToPlayer(cardsToPlayer.concat(setUpCards(1, cardValuesToPlayer, setCardValuesToPlayer)));\n\n        checkGameResults();\n    }\n\n    function stand() {\n        while (calculateScore(cardValuesToDealer) < 17) {\n            setCardsToDealer(cardsToDealer.concat(setUpCards(1, cardValuesToDealer, setCardValuesToDealer)));\n        }\n\n        checkGameResults();\n    }\n\n    /**\n     * Gets key longitude\n     * @param lon\n     * @param lambda\n     * @returns {JSX.Element}\n     */\n    //function convertKeytoCard(num) {\n    //     return Math.floor(lon / lambda) * lambda;\n\n    //}\n    // function Button() {\n    //     return <AwesomeButton type=\"primary\"> Button</AwesomeButton>;\n    // }\n    return (\n        <div>\n            <GameMessage text={\"Dealer's cards: \"} />\n            <GameMessage text={cardsToDealer} />\n            <br />\n            <GameMessage text={\"Player's cards: \"} />\n            <GameMessage text={cardsToPlayer} />\n            <br />\n            {/* <TextBox label=\"\" change={testIng} /> */}\n            {/* <AwesomeButton type=\"primary\" onPress={requestStreetRoute}> Manual Street Input Button </AwesomeButton> */}\n            <AwesomeButton type=\"primary\" size=\"large\" onPress={play}>Play!</AwesomeButton>\n            <br />\n            <AwesomeButton\n                type=\"primary\"\n                size=\"large\"\n                onPress={hit}>Hit</AwesomeButton>\n            <br />\n            <AwesomeButton type=\"primary\" size=\"large\" onPress={stand}>Stand</AwesomeButton>\n            <br />\n            <GameMessage text={whoWon} />\n        </div>\n    )\n}\n\n\nexport default BlackJack"]},"metadata":{},"sourceType":"module"}