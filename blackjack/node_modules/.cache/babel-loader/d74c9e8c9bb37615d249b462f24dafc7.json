{"ast":null,"code":"var _jsxFileName = \"/Users/heonlee/Desktop/Brown/cs0320/term-project-eyan13-hlee184-mji13-rrajesh-wzhong3/blackjack/src/BlackJack.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { AwesomeButton } from \"react-awesome-button\"; // import AwesomeButtonStyles from \"react-awesome-button/src/styles/styles.scss\";\n\nimport \"react-awesome-button/dist/styles.css\"; // import TextBox from \"./TextBox\";\n\nimport GameMessage from \"./GameMessage\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport { useDatabase } from \"../../context/DatabaseContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet cardsToDealer = [];\nlet cardValuesToDealer = [];\n\nfunction BlackJack(props) {\n  _s();\n\n  // const { currentUser } = useAuth();\n  // const { getEntry, userDatabase } = useDatabase();\n  // const [profileInfo, setProfileInfo] = useState({\n  //     bio: \"\", name: \"\", age: \"\", matches: []});\n  const sumOfValues = 364;\n  const [deck, setDeck] = useState([]);\n  const [whoWon, setWhoWon] = useState(\"\");\n  const [cardsToPlayer, setCardsToPlayer] = useState([]);\n  const [cardValuesToPlayer, setCardValuesToPlayer] = useState([]);\n  const [propensityScore, setPropensityScore] = useState(0);\n  useEffect(() => {\n    if (deck.length === 52) {\n      setUpBoard();\n    }\n  }, [deck]);\n\n  function play() {\n    setDeck(Array.from(Array(52).keys()));\n    setWhoWon(\"\");\n  }\n\n  function setUpBoard() {\n    let dealerCardsAndValues = setUpCards(2);\n    let playerCardsAndValues = setUpCards(2); // setCardsToDealer(dealerCardsAndValues[0]);\n\n    cardsToDealer = dealerCardsAndValues[0];\n    setCardsToPlayer(playerCardsAndValues[0]);\n    cardValuesToDealer = dealerCardsAndValues[1]; // setCardValuesToDealer(dealerCardsAndValues[1]);\n\n    setCardValuesToPlayer(playerCardsAndValues[1]);\n  }\n\n  function setUpCards(numCards) {\n    let cardsToAdd = [];\n    let cardsToPerson = [];\n    let cardsValuesToPerson = [];\n\n    for (let i = 0; i < numCards; i++) {\n      let randIndex = Math.floor(Math.random() * deck.length);\n      let chosenCardKey = deck.splice(randIndex, 1);\n      setDeck(deck);\n      let chosenCard = cardFromKey(chosenCardKey);\n      cardsValuesToPerson.push(chosenCardKey % 13 + 1);\n      cardsToPerson.push(chosenCard);\n    }\n\n    cardsToAdd.push(cardsToPerson);\n    cardsToAdd.push(cardsValuesToPerson);\n    return cardsToAdd;\n  } // TODO: Currently coded for the purpose of displaying as text message, but should change it\n  // to make it easier to find the right graphics to display\n\n\n  function cardFromKey(key) {\n    let card = \"\";\n    let cardNumber = key % 13 + 1;\n\n    if (cardNumber === 1) {\n      card += \"Ace \";\n    } else if (cardNumber === 11) {\n      card += \"Jack \";\n    } else if (cardNumber === 12) {\n      card += \"Queen \";\n    } else if (cardNumber === 13) {\n      card += \"King \";\n    } else {\n      card += cardNumber + \" \";\n    } // Spades\n\n\n    if (key < 13) {\n      card += \"Spades \";\n    } // Hearts\n    else if (key < 26) {\n        card += \"Hearts \";\n      } // Clubs\n      else if (key < 39) {\n          card += \"Clubs \";\n        } // Diamonds\n        else {\n            card += \"Diamonds \";\n          }\n\n    return card;\n  }\n  /**\n  * Makes an axios request for player's propensity score.\n  */\n  // const requestPropensityScore = () => {\n  //     const toSend = {\n  //         playerID: playerID\n  //     };\n  //     let config = {\n  //         headers: {\n  //             \"Content-Type\": \"application/json\",\n  //             'Access-Control-Allow-Origin': '*',\n  //         }\n  //     };\n  //     axios.post(\n  //         'http://localhost:4567/ways',\n  //         toSend,\n  //         config\n  //     ).then(response => {\n  //         setPropensityScore(response.data);\n  //     })\n  //         .catch(function (error) {\n  //             console.log(error);\n  //         });\n  // }\n\n\n  function checkGameResults() {\n    const player = calculateScore(cardValuesToDealer);\n    const dealer = calculateScore(cardValuesToPlayer);\n\n    if (player > 21 || dealer < 22 && dealer >= player) {\n      // update database for user's propensity score with final propensity score\n      setWhoWon(\"You Lose :(\");\n    } else {\n      //display \"you win!\"\n      // update database for user's propensity score with final propensity score\n      setWhoWon(\"You Win!\");\n    }\n  }\n\n  useEffect(() => {\n    checkBust();\n  }, [cardValuesToPlayer]);\n\n  function checkBust() {\n    const player = calculateScore(cardValuesToPlayer);\n\n    if (player > 21) {\n      // update database for user's propensity score with final propensity score\n      setWhoWon(\"You Lose :(\");\n    }\n  }\n\n  function calculateScore(cards) {\n    let score = 0;\n\n    for (let i = 0; i < cards.length; i++) {\n      if (cards[i] === 11 || cards[i] === 12 || cards[i] === 13) {\n        score += 10;\n      } else {\n        score += cards[i];\n      }\n    }\n\n    return score;\n  }\n\n  function hit() {\n    let playerCardsAndValues = setUpCards(1);\n    setCardsToPlayer(cardsToPlayer.concat(playerCardsAndValues[0]));\n    setCardValuesToPlayer(cardValuesToPlayer.concat(playerCardsAndValues[1])); // update propensityScore here\n    // setPropensityScore(calculateRisk());\n  }\n\n  function calculateRisk() {// TODO: Fill this function out\n  } // useEffect(() => {\n  //     if (dealerScore < 17) {\n  //         let dealerCardsAndValues = setUpCards(1);\n  //         setCardsToDealer(cardsToDealer.concat(dealerCardsAndValues[0]));\n  //         let newCards = cardValuesToDealer.concat(dealerCardsAndValues[1])\n  //         setCardValuesToDealer(newCards);\n  //         setDealerScore(calculateScore(newCards));\n  //     } else {\n  //         checkGameResults();\n  //     }\n  // }, [dealerScore])\n  // useEffect(() => {\n  //     if (playerStand) {\n  //         let dealerScore = calculateScore(cardValuesToDealer);\n  //     }\n  // }, [playerStand])\n\n\n  function stand() {\n    // setPlayerStand(true);\n    // setDealerScore(calculateScore(cardValuesToDealer));\n    while (calculateScore(cardValuesToDealer) < 17) {\n      let dealerCardsAndValues = setUpCards(1);\n      cardsToDealer = cardsToDealer.concat(dealerCardsAndValues[0]);\n      cardValuesToDealer = cardValuesToDealer.concat(dealerCardsAndValues[1]); // setCardsToDealer(cardsToDealer.concat(dealerCardsAndValues[0]));\n      // setCardValuesToDealer(cardValuesToDealer.concat(dealerCardsAndValues[1]));\n    }\n\n    checkGameResults();\n  }\n  /**\n   * Gets key longitude\n   * @param lon\n   * @param lambda\n   * @returns {JSX.Element}\n   */\n  //function convertKeytoCard(num) {\n  //     return Math.floor(lon / lambda) * lambda;\n  //}\n  // function Button() {\n  //     return <AwesomeButton type=\"primary\"> Button</AwesomeButton>;\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GameMessage, {\n      text: \"Dealer's cards: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameMessage, {\n      text: cardsToDealer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameMessage, {\n      text: \"Player's cards: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameMessage, {\n      text: cardsToPlayer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AwesomeButton, {\n      type: \"primary\",\n      size: \"large\",\n      onPress: play,\n      children: \"Play!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AwesomeButton, {\n      type: \"primary\",\n      size: \"large\",\n      onPress: hit,\n      children: \"Hit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AwesomeButton, {\n      type: \"primary\",\n      size: \"large\",\n      onPress: stand,\n      children: \"Stand\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameMessage, {\n      text: whoWon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BlackJack, \"CfQR4tfXi8LU388DlxswnOMxxT8=\");\n\n_c = BlackJack;\nexport default BlackJack;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlackJack\");","map":{"version":3,"sources":["/Users/heonlee/Desktop/Brown/cs0320/term-project-eyan13-hlee184-mji13-rrajesh-wzhong3/blackjack/src/BlackJack.js"],"names":["React","useState","useEffect","useRef","AwesomeButton","GameMessage","useAuth","useDatabase","cardsToDealer","cardValuesToDealer","BlackJack","props","sumOfValues","deck","setDeck","whoWon","setWhoWon","cardsToPlayer","setCardsToPlayer","cardValuesToPlayer","setCardValuesToPlayer","propensityScore","setPropensityScore","length","setUpBoard","play","Array","from","keys","dealerCardsAndValues","setUpCards","playerCardsAndValues","numCards","cardsToAdd","cardsToPerson","cardsValuesToPerson","i","randIndex","Math","floor","random","chosenCardKey","splice","chosenCard","cardFromKey","push","key","card","cardNumber","checkGameResults","player","calculateScore","dealer","checkBust","cards","score","hit","concat","calculateRisk","stand"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { AwesomeButton } from \"react-awesome-button\";\n// import AwesomeButtonStyles from \"react-awesome-button/src/styles/styles.scss\";\nimport \"react-awesome-button/dist/styles.css\";\n// import TextBox from \"./TextBox\";\nimport GameMessage from \"./GameMessage\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport { useDatabase } from \"../../context/DatabaseContext\";\n\n\nlet cardsToDealer = [];\nlet cardValuesToDealer = [];\nfunction BlackJack(props) {\n    // const { currentUser } = useAuth();\n    // const { getEntry, userDatabase } = useDatabase();\n\n    // const [profileInfo, setProfileInfo] = useState({\n    //     bio: \"\", name: \"\", age: \"\", matches: []});\n    const sumOfValues = 364;\n\n    const [deck, setDeck] = useState([]);\n\n    const [whoWon, setWhoWon] = useState(\"\");\n\n    const [cardsToPlayer, setCardsToPlayer] = useState([]);\n    const [cardValuesToPlayer, setCardValuesToPlayer] = useState([]);\n\n    const [propensityScore, setPropensityScore] = useState(0);\n\n    useEffect(() => {\n        if (deck.length === 52) {\n            setUpBoard();\n        }\n    }, [deck])\n\n    function play() {\n        setDeck(Array.from(Array(52).keys()));\n        setWhoWon(\"\");\n    }\n\n    function setUpBoard() {\n        let dealerCardsAndValues = setUpCards(2);\n        let playerCardsAndValues = setUpCards(2);\n        // setCardsToDealer(dealerCardsAndValues[0]);\n        cardsToDealer = dealerCardsAndValues[0];\n        setCardsToPlayer(playerCardsAndValues[0]);\n        cardValuesToDealer = dealerCardsAndValues[1];\n        // setCardValuesToDealer(dealerCardsAndValues[1]);\n        setCardValuesToPlayer(playerCardsAndValues[1]);\n    }\n\n    function setUpCards(numCards) {\n        let cardsToAdd = [];\n        let cardsToPerson = [];\n        let cardsValuesToPerson = [];\n\n        for (let i = 0; i < numCards; i++) {\n            let randIndex = Math.floor(Math.random() * deck.length);\n            let chosenCardKey = deck.splice(randIndex, 1);\n            setDeck(deck);\n            let chosenCard = cardFromKey(chosenCardKey);\n\n            cardsValuesToPerson.push(chosenCardKey % 13 + 1);\n            cardsToPerson.push(chosenCard);\n        }\n\n        cardsToAdd.push(cardsToPerson);\n        cardsToAdd.push(cardsValuesToPerson);\n\n        return cardsToAdd;\n    }\n\n    // TODO: Currently coded for the purpose of displaying as text message, but should change it\n    // to make it easier to find the right graphics to display\n    function cardFromKey(key) {\n        let card = \"\";\n\n        let cardNumber = key % 13 + 1;\n        if (cardNumber === 1) {\n            card += \"Ace \";\n        } else if (cardNumber === 11) {\n            card += \"Jack \";\n        } else if (cardNumber === 12) {\n            card += \"Queen \";\n        } else if (cardNumber === 13) {\n            card += \"King \";\n        } else {\n            card += cardNumber + \" \";\n        }\n\n        // Spades\n        if (key < 13) {\n            card += \"Spades \";\n        }\n        // Hearts\n        else if (key < 26) {\n            card += \"Hearts \";\n        }\n        // Clubs\n        else if (key < 39) {\n            card += \"Clubs \";\n        }\n        // Diamonds\n        else {\n            card += \"Diamonds \";\n        }\n\n        return card;\n    }\n\n    /**\n    * Makes an axios request for player's propensity score.\n    */\n    // const requestPropensityScore = () => {\n    //     const toSend = {\n    //         playerID: playerID\n    //     };\n\n    //     let config = {\n    //         headers: {\n    //             \"Content-Type\": \"application/json\",\n    //             'Access-Control-Allow-Origin': '*',\n    //         }\n    //     };\n\n    //     axios.post(\n    //         'http://localhost:4567/ways',\n    //         toSend,\n    //         config\n    //     ).then(response => {\n    //         setPropensityScore(response.data);\n    //     })\n\n    //         .catch(function (error) {\n    //             console.log(error);\n    //         });\n    // }\n\n    function checkGameResults() {\n        const player = calculateScore(cardValuesToDealer);\n        const dealer = calculateScore(cardValuesToPlayer);\n        if (player > 21 || (dealer < 22 && dealer >= player)) {\n            // update database for user's propensity score with final propensity score\n            setWhoWon(\"You Lose :(\");\n        } else {\n            //display \"you win!\"\n            // update database for user's propensity score with final propensity score\n            setWhoWon(\"You Win!\");\n        }\n    }\n\n    useEffect(() => {\n        checkBust();\n    }, [cardValuesToPlayer])\n\n    function checkBust() {\n        const player = calculateScore(cardValuesToPlayer);\n        if (player > 21) {\n            // update database for user's propensity score with final propensity score\n            setWhoWon(\"You Lose :(\");\n        }\n    }\n\n    function calculateScore(cards) {\n        let score = 0;\n        for (let i = 0; i < cards.length; i++) {\n            if (cards[i] === 11 || cards[i] === 12 || cards[i] === 13) {\n                score += 10;\n            } else {\n                score += cards[i];\n            }\n        }\n        return score;\n    }\n\n\n    function hit() {\n        let playerCardsAndValues = setUpCards(1);\n        setCardsToPlayer(cardsToPlayer.concat(playerCardsAndValues[0]));\n        setCardValuesToPlayer(cardValuesToPlayer.concat(playerCardsAndValues[1]));\n        // update propensityScore here\n        // setPropensityScore(calculateRisk());\n    }\n\n    function calculateRisk() {\n        // TODO: Fill this function out\n    }\n\n    // useEffect(() => {\n    //     if (dealerScore < 17) {\n    //         let dealerCardsAndValues = setUpCards(1);\n    //         setCardsToDealer(cardsToDealer.concat(dealerCardsAndValues[0]));\n    //         let newCards = cardValuesToDealer.concat(dealerCardsAndValues[1])\n    //         setCardValuesToDealer(newCards);\n    //         setDealerScore(calculateScore(newCards));\n    //     } else {\n    //         checkGameResults();\n    //     }\n    // }, [dealerScore])\n\n    // useEffect(() => {\n    //     if (playerStand) {\n    //         let dealerScore = calculateScore(cardValuesToDealer);\n    //     }\n    // }, [playerStand])\n\n    function stand() {\n        // setPlayerStand(true);\n        // setDealerScore(calculateScore(cardValuesToDealer));\n        while (calculateScore(cardValuesToDealer) < 17) {\n            let dealerCardsAndValues = setUpCards(1);\n            cardsToDealer = cardsToDealer.concat(dealerCardsAndValues[0]);\n            cardValuesToDealer = cardValuesToDealer.concat(dealerCardsAndValues[1]);\n            // setCardsToDealer(cardsToDealer.concat(dealerCardsAndValues[0]));\n            // setCardValuesToDealer(cardValuesToDealer.concat(dealerCardsAndValues[1]));\n        }\n\n        checkGameResults();\n    }\n\n    /**\n     * Gets key longitude\n     * @param lon\n     * @param lambda\n     * @returns {JSX.Element}\n     */\n    //function convertKeytoCard(num) {\n    //     return Math.floor(lon / lambda) * lambda;\n\n    //}\n    // function Button() {\n    //     return <AwesomeButton type=\"primary\"> Button</AwesomeButton>;\n    // }\n    return (\n        <div>\n            <GameMessage text={\"Dealer's cards: \"} />\n            <GameMessage text={cardsToDealer} />\n            <br />\n            <GameMessage text={\"Player's cards: \"} />\n            <GameMessage text={cardsToPlayer} />\n            <br />\n            <AwesomeButton type=\"primary\" size=\"large\" onPress={play}>Play!</AwesomeButton>\n            <br />\n            <AwesomeButton\n                type=\"primary\"\n                size=\"large\"\n                onPress={hit}>Hit</AwesomeButton>\n            <br />\n            <AwesomeButton type=\"primary\" size=\"large\" onPress={stand}>Stand</AwesomeButton>\n            <br />\n            <GameMessage text={whoWon} />\n        </div>\n    )\n}\n\n\nexport default BlackJack"]},"metadata":{},"sourceType":"module"}