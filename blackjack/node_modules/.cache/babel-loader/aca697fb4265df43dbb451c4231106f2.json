{"ast":null,"code":"var _jsxFileName = \"/Users/riarajesh/cs0320/term-project-eyan13-hlee184-mji13-rrajesh-wzhong3/blackjack/src/BlackJack.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components'; // import AwesomeButtonStyles from \"react-awesome-button/src/styles/styles.scss\";\n\nimport \"react-awesome-button/dist/styles.css\"; // import TextBox from \"./TextBox\";\n\nimport GameMessage from \"./GameMessage\";\nimport './BlackJack.css';\nimport Hand from \"./Hand.js\";\nimport Card from \"./Card.js\"; // import { useAuth } from \"../../context/AuthContext\";\n// import { useDatabase } from \"../../context/DatabaseContext\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet cardsOfDealer = [];\nlet cardValuesOfDealer = [];\n\nfunction BlackJack() {\n  _s();\n\n  // const { currentUser } = useAuth();\n  // const { getEntry, userDatabase } = useDatabase();\n  // const [profileInfo, setProfileInfo] = useState({\n  //     bio: \"\", name: \"\", age: \"\", matches: []});\n  let dealerHand = [-1, -1];\n  const sumOfValues = 364;\n  const [deck, setDeck] = useState([]);\n  const [whoWon, setWhoWon] = useState(\"\");\n  const [cardsOfPlayer, setCardsOfPlayer] = useState([]);\n  const [cardValuesOfPlayer, setCardValuesOfPlayer] = useState([]);\n  let [playerHand, setPlayerHand] = useState([-1, -1]);\n  const [riskPropensityScore, setRiskPropensityScore] = useState(0);\n  useEffect(() => {\n    if (deck.length === 52) {\n      setUpBoard();\n    }\n  }, [deck]);\n\n  function play() {\n    setDeck(Array.from(Array(52).keys()));\n    setWhoWon(\"\");\n  }\n\n  function setUpBoard() {\n    let dealerCardsAndValues = setUpCards(2);\n    let playerCardsAndValues = setUpCards(2); // setCardsOfDealer(dealerCardsAndValues[0]);\n\n    cardsOfDealer = dealerCardsAndValues[0];\n    setCardsOfPlayer(playerCardsAndValues[0]);\n    cardValuesOfDealer = dealerCardsAndValues[1]; // setCardValuesOfDealer(dealerCardsAndValues[1]);\n\n    setCardValuesOfPlayer(playerCardsAndValues[1]);\n  }\n\n  function setUpCards(numCards) {\n    let cardsToAdd = [];\n    let cardsOfPerson = [];\n    let cardsValuesOfPerson = [];\n\n    for (let i = 0; i < numCards; i++) {\n      let randIndex = Math.floor(Math.random() * deck.length);\n      let chosenCardKey = deck.splice(randIndex, 1);\n      setDeck(deck);\n      let chosenCard = cardFromKey(chosenCardKey);\n      cardsValuesOfPerson.push(chosenCardKey % 13 + 1);\n      cardsOfPerson.push(chosenCard);\n    }\n\n    cardsToAdd.push(cardsOfPerson);\n    cardsToAdd.push(cardsValuesOfPerson);\n    return cardsToAdd;\n  } // TODO: Currently coded for the purpose of displaying as text message, but should change it\n  // to make it easier to find the right graphics to display\n\n\n  function cardFromKey(key) {\n    console.log(key);\n    let card = \"\";\n    let cardNumber = key % 13 + 1;\n\n    if (cardNumber === 1) {\n      card += \"Ace \";\n    } else if (cardNumber === 11) {\n      card += \"Jack \";\n    } else if (cardNumber === 12) {\n      card += \"Queen \";\n    } else if (cardNumber === 13) {\n      card += \"King \";\n    } else {\n      card += cardNumber + \" \";\n    } // Spades\n\n\n    if (key < 13) {\n      card += \"Spades \";\n    } // Hearts\n    else if (key < 26) {\n        card += \"Hearts \";\n      } // Clubs\n      else if (key < 39) {\n          card += \"Clubs \";\n        } // Diamonds\n        else {\n            card += \"Diamonds \";\n          }\n\n    return card;\n  }\n  /**\n  * Makes an axios request for player's risk propensity score.\n  */\n  // const requestRiskPropensityScore = () => {\n  //     const toSend = {\n  //         playerID: playerID\n  //     };\n  //     let config = {\n  //         headers: {\n  //             \"Content-Type\": \"application/json\",\n  //             'Access-Control-Allow-Origin': '*',\n  //         }\n  //     };\n  //     axios.post(\n  //         'http://localhost:4567/ways',\n  //         toSend,\n  //         config\n  //     ).then(response => {\n  //         setRiskPropensityScore(response.data);\n  //     })\n  //         .catch(function (error) {\n  //             console.log(error);\n  //         });\n  // }\n\n\n  useEffect(() => {\n    checkBust();\n  }, [cardValuesOfPlayer]);\n\n  function checkBust() {\n    const player = calculateScore(cardValuesOfPlayer);\n\n    if (player > 21) {\n      // update database for user's risk propensity score with final risk propensity score\n      setWhoWon(\"You Lose :(\");\n    }\n  }\n\n  function calculateScore(cards) {\n    let score = 0;\n\n    for (let i = 0; i < cards.length; i++) {\n      if (cards[i] === 11 || cards[i] === 12 || cards[i] === 13) {\n        score += 10;\n      } else {\n        score += cards[i];\n      }\n    }\n\n    return score;\n  }\n\n  function hit() {\n    let playerCardsAndValues = setUpCards(1);\n    setCardsOfPlayer(cardsOfPlayer.concat(playerCardsAndValues[0]));\n    setCardValuesOfPlayer(cardValuesOfPlayer.concat(playerCardsAndValues[1]));\n    console.log(playerCardsAndValues[1][0]);\n    playerHand.push(playerCardsAndValues[1][0]);\n    console.log(playerHand); // update riskpropensityScore here\n    // setRiskPropensityScore(calculateRisk());\n  }\n\n  function calculateRisk() {\n    let remainingSum = sumOfValues;\n    const maxBeforeBust = 21 - calculateScore(cardValuesOfPlayer);\n    let count = 0;\n\n    for (let i = 0; i < deck.length; i++) {\n      if (deck[i] <= maxBeforeBust) {\n        count++;\n      }\n    }\n\n    return count / deck.length;\n  } // useEffect(() => {\n  //     if (dealerScore < 17) {\n  //         let dealerCardsAndValues = setUpCards(1);\n  //         setCardsOfDealer(cardsOfDealer.concat(dealerCardsAndValues[0]));\n  //         let newCards = cardValuesOfDealer.concat(dealerCardsAndValues[1])\n  //         setCardValuesOfDealer(newCards);\n  //         setDealerScore(calculateScore(newCards));\n  //     } else {\n  //         checkGameResults();\n  //     }\n  // }, [dealerScore])\n  // useEffect(() => {\n  //     if (playerStand) {\n  //         let dealerScore = calculateScore(cardValuesOfDealer);\n  //     }\n  // }, [playerStand])\n\n\n  function checkGameResults() {\n    const dealer = calculateScore(cardValuesOfDealer);\n    const player = calculateScore(cardValuesOfPlayer);\n\n    if (player > 21 || dealer < 22 && dealer >= player) {\n      // update database for user's risk propensity score with final risk propensity score\n      setWhoWon(\"You Lose :(\");\n    } else {\n      //display \"you win!\"\n      // update database for user's risk propensity score with final risk propensity score\n      setWhoWon(\"You Win!\");\n    }\n  }\n\n  function stand() {\n    // setPlayerStand(true);\n    // setDealerScore(calculateScore(cardValuesOfDealer));\n    while (calculateScore(cardValuesOfDealer) < 17) {\n      let dealerCardsAndValues = setUpCards(1);\n      cardsOfDealer = cardsOfDealer.concat(dealerCardsAndValues[0]);\n      cardValuesOfDealer = cardValuesOfDealer.concat(dealerCardsAndValues[1]); // setCardsOfDealer(cardsOfDealer.concat(dealerCardsAndValues[0]));\n      // setCardValuesOfDealer(cardValuesOfDealer.concat(dealerCardsAndValues[1]));\n    }\n\n    checkGameResults();\n  }\n  /**\n   * Gets key longitude\n   * @param lon\n   * @param lambda\n   * @returns {JSX.Element}\n   */\n  //function convertKeytoCard(num) {\n  //     return Math.floor(lon / lambda) * lambda;\n  //}\n  // function Button() {\n  //     return <AwesomeButton type=\"primary\"> Button</AwesomeButton>;\n  // }\n\n\n  const Button = styled.button`\n  background-color: black;\n  color: white;\n  font-size: 20px;\n  padding: 10px 60px;\n  border-radius: 5px;\n  margin: 10px 0px;\n  cursor: pointer;\n`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards\",\n      children: [/*#__PURE__*/_jsxDEV(GameMessage, {\n        text: \"Dealer's cards: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(GameMessage, {\n        text: cardsOfDealer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Hand, {\n        cards: dealerHand\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(GameMessage, {\n        text: \"Player's cards: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(GameMessage, {\n        text: cardsOfPlayer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Hand, {\n        cards: playerHand\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: play,\n        children: \"Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: hit,\n        children: \"Hit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: stand,\n        children: \"Stand\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(GameMessage, {\n        text: whoWon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BlackJack, \"S4yzN+patxleznJfx/XYl9I65wQ=\");\n\n_c = BlackJack;\nexport default BlackJack;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlackJack\");","map":{"version":3,"sources":["/Users/riarajesh/cs0320/term-project-eyan13-hlee184-mji13-rrajesh-wzhong3/blackjack/src/BlackJack.js"],"names":["React","useState","useEffect","styled","GameMessage","Hand","Card","cardsOfDealer","cardValuesOfDealer","BlackJack","dealerHand","sumOfValues","deck","setDeck","whoWon","setWhoWon","cardsOfPlayer","setCardsOfPlayer","cardValuesOfPlayer","setCardValuesOfPlayer","playerHand","setPlayerHand","riskPropensityScore","setRiskPropensityScore","length","setUpBoard","play","Array","from","keys","dealerCardsAndValues","setUpCards","playerCardsAndValues","numCards","cardsToAdd","cardsOfPerson","cardsValuesOfPerson","i","randIndex","Math","floor","random","chosenCardKey","splice","chosenCard","cardFromKey","push","key","console","log","card","cardNumber","checkBust","player","calculateScore","cards","score","hit","concat","calculateRisk","remainingSum","maxBeforeBust","count","checkGameResults","dealer","stand","Button","button"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n// import AwesomeButtonStyles from \"react-awesome-button/src/styles/styles.scss\";\nimport \"react-awesome-button/dist/styles.css\";\n// import TextBox from \"./TextBox\";\nimport GameMessage from \"./GameMessage\";\nimport './BlackJack.css';\nimport Hand from \"./Hand.js\";\nimport Card from \"./Card.js\";\n// import { useAuth } from \"../../context/AuthContext\";\n// import { useDatabase } from \"../../context/DatabaseContext\";\n\n\nlet cardsOfDealer = [];\nlet cardValuesOfDealer = [];\nfunction BlackJack() {\n    // const { currentUser } = useAuth();\n    // const { getEntry, userDatabase } = useDatabase();\n\n    // const [profileInfo, setProfileInfo] = useState({\n    //     bio: \"\", name: \"\", age: \"\", matches: []});\n    let dealerHand = [-1, -1];\n    const sumOfValues = 364;\n\n    const [deck, setDeck] = useState([]);\n\n    const [whoWon, setWhoWon] = useState(\"\");\n\n    const [cardsOfPlayer, setCardsOfPlayer] = useState([]);\n    const [cardValuesOfPlayer, setCardValuesOfPlayer] = useState([]);\n    let [playerHand, setPlayerHand] = useState([-1, -1]);\n\n    const [riskPropensityScore, setRiskPropensityScore] = useState(0);\n\n    useEffect(() => {\n        if (deck.length === 52) {\n            setUpBoard();\n        }\n    }, [deck])\n\n    function play() {\n        setDeck(Array.from(Array(52).keys()));\n        setWhoWon(\"\");\n    }\n\n    function setUpBoard() {\n        let dealerCardsAndValues = setUpCards(2);\n        let playerCardsAndValues = setUpCards(2);\n        // setCardsOfDealer(dealerCardsAndValues[0]);\n        cardsOfDealer = dealerCardsAndValues[0];\n        setCardsOfPlayer(playerCardsAndValues[0]);\n        cardValuesOfDealer = dealerCardsAndValues[1];\n        // setCardValuesOfDealer(dealerCardsAndValues[1]);\n        setCardValuesOfPlayer(playerCardsAndValues[1]);\n    }\n\n    function setUpCards(numCards) {\n        let cardsToAdd = [];\n        let cardsOfPerson = [];\n        let cardsValuesOfPerson = [];\n\n        for (let i = 0; i < numCards; i++) {\n            let randIndex = Math.floor(Math.random() * deck.length);\n            let chosenCardKey = deck.splice(randIndex, 1);\n            setDeck(deck);\n            let chosenCard = cardFromKey(chosenCardKey);\n\n            cardsValuesOfPerson.push(chosenCardKey % 13 + 1);\n            cardsOfPerson.push(chosenCard);\n        }\n\n        cardsToAdd.push(cardsOfPerson);\n        cardsToAdd.push(cardsValuesOfPerson);\n\n        return cardsToAdd;\n    }\n\n    // TODO: Currently coded for the purpose of displaying as text message, but should change it\n    // to make it easier to find the right graphics to display\n    function cardFromKey(key) {\n        console.log(key);\n        let card = \"\";\n\n        let cardNumber = key % 13 + 1;\n        if (cardNumber === 1) {\n            card += \"Ace \";\n        } else if (cardNumber === 11) {\n            card += \"Jack \";\n        } else if (cardNumber === 12) {\n            card += \"Queen \";\n        } else if (cardNumber === 13) {\n            card += \"King \";\n        } else {\n            card += cardNumber + \" \";\n        }\n\n        // Spades\n        if (key < 13) {\n            card += \"Spades \";\n        }\n        // Hearts\n        else if (key < 26) {\n            card += \"Hearts \";\n        }\n        // Clubs\n        else if (key < 39) {\n            card += \"Clubs \";\n        }\n        // Diamonds\n        else {\n            card += \"Diamonds \";\n        }\n\n        return card;\n    }\n\n    /**\n    * Makes an axios request for player's risk propensity score.\n    */\n    // const requestRiskPropensityScore = () => {\n    //     const toSend = {\n    //         playerID: playerID\n    //     };\n\n    //     let config = {\n    //         headers: {\n    //             \"Content-Type\": \"application/json\",\n    //             'Access-Control-Allow-Origin': '*',\n    //         }\n    //     };\n\n    //     axios.post(\n    //         'http://localhost:4567/ways',\n    //         toSend,\n    //         config\n    //     ).then(response => {\n    //         setRiskPropensityScore(response.data);\n    //     })\n\n    //         .catch(function (error) {\n    //             console.log(error);\n    //         });\n    // }\n\n    useEffect(() => {\n        checkBust();\n    }, [cardValuesOfPlayer])\n\n    function checkBust() {\n        const player = calculateScore(cardValuesOfPlayer);\n        if (player > 21) {\n            // update database for user's risk propensity score with final risk propensity score\n            setWhoWon(\"You Lose :(\");\n        }\n    }\n\n    function calculateScore(cards) {\n        let score = 0;\n        for (let i = 0; i < cards.length; i++) {\n            if (cards[i] === 11 || cards[i] === 12 || cards[i] === 13) {\n                score += 10;\n            } else {\n                score += cards[i];\n            }\n        }\n        return score;\n    }\n\n\n    function hit() {\n        let playerCardsAndValues = setUpCards(1);\n        setCardsOfPlayer(cardsOfPlayer.concat(playerCardsAndValues[0]));\n        setCardValuesOfPlayer(cardValuesOfPlayer.concat(playerCardsAndValues[1]));\n        console.log(playerCardsAndValues[1][0])\n        playerHand.push(playerCardsAndValues[1][0]);\n        console.log(playerHand);\n        // update riskpropensityScore here\n        // setRiskPropensityScore(calculateRisk());\n    }\n\n    function calculateRisk() {\n        let remainingSum = sumOfValues;\n        const maxBeforeBust = 21 - calculateScore(cardValuesOfPlayer);\n        let count = 0;\n        for (let i = 0; i < deck.length; i++) {\n            if (deck[i] <= maxBeforeBust) {\n                count++;\n            }\n        }\n        return count / deck.length;\n    }\n\n    // useEffect(() => {\n    //     if (dealerScore < 17) {\n    //         let dealerCardsAndValues = setUpCards(1);\n    //         setCardsOfDealer(cardsOfDealer.concat(dealerCardsAndValues[0]));\n    //         let newCards = cardValuesOfDealer.concat(dealerCardsAndValues[1])\n    //         setCardValuesOfDealer(newCards);\n    //         setDealerScore(calculateScore(newCards));\n    //     } else {\n    //         checkGameResults();\n    //     }\n    // }, [dealerScore])\n\n    // useEffect(() => {\n    //     if (playerStand) {\n    //         let dealerScore = calculateScore(cardValuesOfDealer);\n    //     }\n    // }, [playerStand])\n\n    function checkGameResults() {\n        const dealer = calculateScore(cardValuesOfDealer);\n        const player = calculateScore(cardValuesOfPlayer);\n        if (player > 21 || (dealer < 22 && dealer >= player)) {\n            // update database for user's risk propensity score with final risk propensity score\n            setWhoWon(\"You Lose :(\");\n        } else {\n            //display \"you win!\"\n            // update database for user's risk propensity score with final risk propensity score\n            setWhoWon(\"You Win!\");\n        }\n    }\n\n    function stand() {\n        // setPlayerStand(true);\n        // setDealerScore(calculateScore(cardValuesOfDealer));\n        while (calculateScore(cardValuesOfDealer) < 17) {\n            let dealerCardsAndValues = setUpCards(1);\n            cardsOfDealer = cardsOfDealer.concat(dealerCardsAndValues[0]);\n            cardValuesOfDealer = cardValuesOfDealer.concat(dealerCardsAndValues[1]);\n            // setCardsOfDealer(cardsOfDealer.concat(dealerCardsAndValues[0]));\n            // setCardValuesOfDealer(cardValuesOfDealer.concat(dealerCardsAndValues[1]));\n        }\n\n        checkGameResults();\n    }\n\n    /**\n     * Gets key longitude\n     * @param lon\n     * @param lambda\n     * @returns {JSX.Element}\n     */\n    //function convertKeytoCard(num) {\n    //     return Math.floor(lon / lambda) * lambda;\n\n    //}\n    // function Button() {\n    //     return <AwesomeButton type=\"primary\"> Button</AwesomeButton>;\n    // }\n    const Button = styled.button`\n  background-color: black;\n  color: white;\n  font-size: 20px;\n  padding: 10px 60px;\n  border-radius: 5px;\n  margin: 10px 0px;\n  cursor: pointer;\n`;\n    return (\n        <div className=\"body\">\n        <div className=\"cards\">\n            <GameMessage text={\"Dealer's cards: \"} />\n            <GameMessage text={cardsOfDealer} />\n            <Hand cards={dealerHand} />\n            <br />\n            <GameMessage text={\"Player's cards: \"} />\n            <GameMessage text={cardsOfPlayer} />\n            <Hand cards={playerHand} />\n            <br />\n        </div>\n        <div className=\"buttons\">\n            <Button onClick={play}>Play</Button>\n            <br />\n            <Button\n                onClick={hit}>Hit</Button>\n            <br />\n            <Button onClick={stand}>Stand</Button>\n            <br />\n            <GameMessage text={whoWon} />\n        </div>\n        </div>\n\n    )\n}\n\n\nexport default BlackJack"]},"metadata":{},"sourceType":"module"}